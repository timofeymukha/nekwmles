
!      module test_spalding

!      contains 
 
      ! A mock of the real routine. Sets any real param to 0.75.
      subroutine rprm_rp_get(ipval,rpval,lpval,cpval,rpid,ptype)
      implicit none
      integer rpid, ptype
      integer ipval
      real rpval
      logical lpval
      character*20 cpval
      rpval = 0.75
      end subroutine

      ! This test simply calls spalding_value for some different
      ! compinations of parameters and sees taht we get the right value.
      ! The "right" values come from a previous implementation
      ! in Python.
      @test
      subroutine test_spalding_value()
         use funit

         common /input1/ param

         real param(200)
         real spalding_value

         real x
         
         param(2) = 1
         x = spalding_value(1., 1., 1.)
         @assertEqual(0.008796031296, x, tolerance=1e-7)

         x = spalding_value(0.5, 8., 1.)
         @assertEqual(-7.499492977546499, x, tolerance=1e-7)

         x = spalding_value(0.25, 0.34, 0.3)
         @assertEqual(0.7354604716175056, x, tolerance=1e-7)
      end subroutine

      ! Same as above, but for the drivative
      @test
      subroutine test_spalding_dervative()
         use funit

         common /input1/ param

         real param(200)
         real spalding_value
         
         real x
         
         param(2) = 1
         x = spalding_derivative(1., 1., 1.)
         @assertEqual(-2.03664416501472, x, message='(1, 1, 1)', tolerance=1e-7)

         x = spalding_derivative(0.5, 8., 1.)
         @assertEqual(-8.50206807974180, x, message='(0.5, 8, 1)', tolerance=1e-7)

         x = spalding_derivative(0.25, 0.34, 0.3)
         @assertEqual(-3.17467707105872, x, message='(0.25, 0.34, 0.3)', tolerance=1e-6)

      end subroutine

!      end module