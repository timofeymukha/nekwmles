c mesh dimensions
#define PI (4.*atan(1.))
#define XLEN 8
#define ZLEN 6
c-----------------------------------------------------------------------
c Must have this dummy function here

      subroutine wmles_set_heat_flux(h, ix, iy, iz, ie)
      end subroutine
c-----------------------------------------------------------------------
      subroutine user_set_sampling_height()
      implicit none
      include 'SIZE'
      include 'WMLES'

      wmles_sampling_h = 0.2

      end subroutine
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      implicit none
      include 'SIZE'
      include 'NEKUSE'
      include 'SOLN'
      include 'PARALLEL'  ! gllel
      include 'TSTEP'  ! ifield

      integer ix,iy,iz,ieg,iel

      iel = gllel(ieg)

      if (ifield.eq.1) then  ! velocity
        ! Set the variable viscosity to vdiff, which is computed
        ! by the sgs model
        udiff = vdiff(ix,iy,iz,iel,1) 
        utrans = 1.0  ! density
      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0 
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol =  0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      implicit none

      include 'SIZE'
      include 'TSTEP'           ! ISTEP, lastep, time
      include 'INPUT'
      include 'SOLN'
      include 'GEOM'
      include 'SGS'
      include 'WMLES'
      include 'OBJDATA' !Drag data

      real x0(3)
      data x0 /0.0, 0.0, 0.0/ 
      save x0

      integer bIDs(1)
      integer iobj_wall, nm
      integer iglsum
      save iobj_wall

      integer i, j, k, ielem
      
!     Computing wall area
      real retau
      real xmin, xmax, zmin, zmax
      real glmin, glmax
      real areaa

      integer e, n
      n=nx1*ny1*nz1*nelv


!      interpolate if you have initial data
      if (ISTEP.eq.0) call gfldr("ics.f00000")

!     Start framework
      if (ISTEP.eq.0) call frame_start

      if (ISTEP.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall,bIDs,1)
         nm = iglsum(nmember(iobj_wall),1)
         if(nid.eq.0) write(6,*) 'obj_wall nmem:', nm 
         call prepost(.true.,'  ')
      endif

!     SGS model
      if (nid.eq.0) write(6,*) 'Calculating eddy viscosity'
      do e=1,nelv
         call eddy_visc(e)
      enddo

!     The wall model
      call wmles_algebraic
!     Prints wall-moedl related stuff to the log
      call wmles_print_averaged_quantities

!     monitor simulation
      call frame_monitor
      
!     statistics
      call stat_avg
      
!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end      
      endif

      return
      end

c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'NEKUSE'
      include 'PARALLEL'  ! gllel
      include 'WMLES'
      include 'GEOM'


      integer ix,iy,iz,ieg,iel

      iel = gllel(ieg)
      i = wmles_inv_indices(ix, iy, iz, iel)

      trx = wmles_tau(i, 1)
      try = wmles_tau(i, 2)
      trz = wmles_tau(i, 3)

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'  ! x, y, z, ux, uy, uz, temp
      include 'SOLN'
      include 'PARALLEL'
      include 'GEOM'  ! ym1
      include 'INPUT'  ! uparam

      integer ix,iy,iz,eg, iel

      iel = gllel(ieg)

      vdiff(ix,iy,iz,iel,1) = param(2)  ! dynamic viscosity

      ! If you don't have initial data to interpolate from, you 
      ! should add some reasonable ICs here

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.
      include 'SGS'  ! ediff, dg2

      n = nelv * 2**ldim
      xmin = glmin(xc,n)
      xmax = glmax(xc,n)
      ymin = glmin(yc,n)
      ymax = glmax(yc,n)
      zmin = glmin(zc,n)
      zmax = glmax(zc,n)

      xscale = XLEN/(xmax-xmin)
      zscale = ZLEN/(zmax-zmin)

      do i=1,n
         xc(i,1) = xscale*xc(i,1)
         zc(i,1) = zscale*zc(i,1)
      enddo

      ! initialize ediff to visocisty, it is used by the sgs model
      n = nx1*ny1*nz1*nelt
      call cfill(ediff,param(2),n)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

c     Define Delta
      call set_grid_spacing  ! set dg2


c     Marks the faces that wil be used for WMLES
      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'sh ') boundaryID(ifc,iel) = 1 
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      param(54) = -1  ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z) 
      param(55) = 1 ! flowrate/bulk-velocity 

      return
      end


c-----------------------------------------------------------------------

!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call io_register
      call stat_register
      call wmles_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
      include 'SOLN'
!-----------------------------------------------------------------------
!     initialise modules

      call stat_init
      call wmles_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     finalise modules
      call stat_end
      
      return
      end subroutine
!======================================================================
!> @brief Provide element coordinates and local numbers (user interface)
!! @param[out]  idir              mapping (uniform) direction
!! @param[out]  ctrs              2D element centres
!! @param[out]  cell              local element numberring
!! @param[in]   lctrs1,lctrs2     array sizes
!! @param[out]  nelsort           number of local 3D elements to sort
!! @param[out]  map_xm1, map_ym1  2D coordinates of mapped elements
!! @param[out]  ierr              error flag
      subroutine user_map2d_get(idir,ctrs,cell,lctrs1,lctrs2,nelsort,
     $     map_xm1,map_ym1,ierr)
      implicit none

      include 'SIZE'
      include 'INPUT'           ! [XYZ]C
      include 'GEOM'            ! [XYZ]M1

!     argument list
      integer idir
      integer lctrs1,lctrs2
      real ctrs(lctrs1,lctrs2)  ! 2D element centres  and diagonals 
      integer cell(lctrs2)      ! local element numberring
      integer nelsort           ! number of local 3D elements to sort
      real map_xm1(lx1,lz1,lelt), map_ym1(lx1,lz1,lelt)
      integer ierr              ! error flag

!     local variables
      integer ntot              ! tmp array size for copying
      integer el ,il ,jl        ! loop indexes
      integer nvert             ! vertex number
      real rnvert               ! 1/nvert
      real xmid,ymid            ! 2D element centre
      real xmin,xmax,ymin,ymax  ! to get approximate element diagonal
      integer ifc               ! face number

!     dummy arrays
      real xcoord(8,LELT), ycoord(8,LELT) ! tmp vertex coordinates

!#define DEBUG
#ifdef DEBUG
!     for testing
      character*3 str1, str2
      integer iunit, ierrl
      ! call number
      integer icalldl
      save icalldl
      data icalldl /0/
#endif

!-----------------------------------------------------------------------
!     initial error flag
      ierr = 0
!     set important parameters
!     uniform direction; should be taken as input parameter
!     x-> 1, y-> 2, z-> 3
      idir = 3
      
!     get element midpoints
!     vertex number
      nvert = 2**NDIM
      rnvert= 1.0/real(nvert)

!     eliminate uniform direction
      ntot = 8*NELV
      if (idir.EQ.1) then  ! uniform X
         call copy(xcoord,YC,ntot) ! copy y
         call copy(ycoord,ZC,ntot) ! copy z
      elseif (idir.EQ.2) then  ! uniform Y
         call copy(xcoord,XC,ntot) ! copy x
         call copy(ycoord,ZC,ntot) ! copy z
      elseif (idir.EQ.3) then  ! uniform Z
         call copy(xcoord,XC,ntot) ! copy x
         call copy(ycoord,YC,ntot) ! copy y
      endif

!     set initial number of elements to sort
      nelsort = 0
      call izero(cell,NELT)

!     for every element
      do el=1,NELV
!     element centre
         xmid = xcoord(1,el)
         ymid = ycoord(1,el)

!     element diagonal
         xmin = xmid
         xmax = xmid
         ymin = ymid
         ymax = ymid
         do il=2,nvert
            xmid=xmid+xcoord(il,el)
            ymid=ymid+ycoord(il,el)
            xmin = min(xmin,xcoord(il,el))
            xmax = max(xmax,xcoord(il,el))
            ymin = min(ymin,ycoord(il,el))
            ymax = max(ymax,ycoord(il,el))
         enddo
         xmid = xmid*rnvert
         ymid = ymid*rnvert

!     count elements to sort
            nelsort = nelsort + 1
!     2D position
!     in general this coud involve some curvilinear transform
            ctrs(1,nelsort)=xmid
            ctrs(2,nelsort)=ymid
!     reference distance
            ctrs(3,nelsort)=sqrt((xmax-xmin)**2 + (ymax-ymin)**2)
            if (ctrs(3,nelsort).eq.0.0) then
               ierr = 1
               return
            endif
!     element index
            cell(nelsort) = el
      enddo

!     provide 2D mesh
!     in general this coud involve some curvilinear transform
      if (idir.EQ.1) then  ! uniform X
         ifc = 4
         do el=1,NELV
            call ftovec(map_xm1(1,1,el),ym1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),zm1,el,ifc,nx1,ny1,nz1)
         enddo
      elseif (idir.eq.2) then  ! uniform y
         ifc = 1
         do el=1,nelv
            call ftovec(map_xm1(1,1,el),xm1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),zm1,el,ifc,nx1,ny1,nz1)
         enddo
      elseif (idir.eq.3) then  ! uniform z
         ifc = 5
         do el=1,nelv
            call ftovec(map_xm1(1,1,el),xm1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),ym1,el,ifc,nx1,ny1,nz1)
         enddo
      endif

#ifdef DEBUG
!     testing
      ! to output refinement
      icalldl = icalldl+1
      call io_file_freeid(iunit, ierrl)
      write(str1,'(i3.3)') NID
      write(str2,'(i3.3)') icalldl
      open(unit=iunit,file='map2d_usr.txt'//str1//'i'//str2)
      
      write(iunit,*) idir, NELV, nelsort
      write(iunit,*) 'Centre coordinates and cells'
      do el=1,nelsort
         write(iunit,*) el, ctrs(:,el), cell(el)
      enddo
      write(iunit,*) 'GLL coordinates'
      do el=1,nelsort
         write(iunit,*) 'Element ', el
         write(iunit,*) 'XM1'
         do il=1,nz1
            write(iunit,*) (map_xm1(jl,il,el),jl=1,nx1)
         enddo
         write(iunit,*) 'YM1'
         do il=1,nz1
            write(iunit,*) (map_ym1(jl,il,el),jl=1,nx1)
         enddo
      enddo
      close(iunit)
#endif

      return
      end subroutine
!=======================================================================
!> @brief Provide velocity, deriv. and vort. in required coordinates and normalise pressure
!! @param[out]   lvel             velocity
!! @param[out]   dudx,dvdx,dwdx   velocity derivatives
!! @param[out]   vort             vorticity
!! @param[inout] pres             pressure
      subroutine user_stat_trnsv(lvel,dudx,dvdx,dwdx,vort,pres)
      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'               ! if3d
      include 'GEOM'

      ! argument list
      real lvel(LX1,LY1,LZ1,LELT,3) ! velocity array
      real dudx(LX1,LY1,LZ1,LELT,3) ! velocity derivatives; U
      real dvdx(LX1,LY1,LZ1,LELT,3) ! V
      real dwdx(LX1,LY1,LZ1,LELT,3) ! W
      real vort(LX1,LY1,LZ1,LELT,3) ! vorticity
      real pres(LX1,LY1,LZ1,LELT)   ! pressure

      ! local variables
      integer itmp              ! dummy variable
      integer il, jl            ! loop index
      integer ifll              ! field number for object definition
      real vrtmp(lx1*lz1)       ! work array for face
      real vrtmp2(2)            ! work array
      real pmeanl, obj_srfl
 
      ! functions
      real vlsum
!-----------------------------------------------------------------------
      ! Velocity transformation; simple copy
      itmp = NX1*NY1*NZ1*NELV
      call copy(lvel(1,1,1,1,1),VX,itmp)
      call copy(lvel(1,1,1,1,2),VY,itmp)
      call copy(lvel(1,1,1,1,3),VZ,itmp)

      ! Derivative transformation
      ! No transformation
      call gradm1(dudx(1,1,1,1,1),dudx(1,1,1,1,2),dudx(1,1,1,1,3),
     $      lvel(1,1,1,1,1))
      call gradm1(dvdx(1,1,1,1,1),dvdx(1,1,1,1,2),dvdx(1,1,1,1,3),
     $      lvel(1,1,1,1,2))
      call gradm1(dwdx(1,1,1,1,1),dwdx(1,1,1,1,2),dwdx(1,1,1,1,3),
     $      lvel(1,1,1,1,3))

      ! get vorticity
      if (IF3D) then
         ! curlx
         call sub3(vort(1,1,1,1,1),dwdx(1,1,1,1,2),
     $        dvdx(1,1,1,1,3),itmp)
         ! curly
         call sub3(vort(1,1,1,1,2),dudx(1,1,1,1,3),
     $        dwdx(1,1,1,1,1),itmp)
      endif
      ! curlz
      call sub3(vort(1,1,1,1,3),dvdx(1,1,1,1,1),dudx(1,1,1,1,2),itmp)

      ! normalise pressure
      ! in this example I integrate pressure over all faces marked "sh "
      ifll = 1     ! I'm interested in velocity bc
      call rzero(vrtmp2,2)  ! zero work array
      obj_srfl = 0.0 ! initialise object surface
      pmeanl = 0.0  ! initialise pressure mean
      itmp = LX1*LZ1
      do il=1,nelv   ! element loop
         do jl=1,2*ldim
            if (cbc(jl,il,ifll).eq.'sh ') then
               vrtmp2(1) = vrtmp2(1) + vlsum(area(1,1,jl,il),itmp)
               call ftovec(vrtmp,pres,il,jl,lx1,ly1,lz1)
               call col2(vrtmp,area(1,1,jl,il),itmp)
               vrtmp2(2) = vrtmp2(2) + vlsum(vrtmp,itmp)
            endif
         enddo
      enddo
      ! global communication
      call gop(vrtmp2,vrtmp,'+  ',2)
      ! missing error chack vrtmp2(1) == 0
      vrtmp2(2) = -vrtmp2(2)/vrtmp2(1)
!     DEBUG
!      write(*,*)'vrtmp2(1)',vrtmp2(1)      
      ! subtract mean pressure
      itmp = NX1*NY1*NZ1*NELV
      call cadd(pres,vrtmp2(2),itmp)
      
      return
      end subroutine

c-----------------------------------------------------------------------
