c     USER SETTING: max local number of boundary points for which
c     WMLES is applied. A check for it being large enough will be
c     applied.
      integer NMAX_BOUNDARY_POINTS
      parameter(NMAX_BOUNDARY_POINTS=4000)


c     module id and name
      integer wmles_id
      character*(*) wmles_name
      parameter(wmles_name='WMLES')

c     initialisation flag
      logical wmles_ifinit

c     Runtime parameter part
c     section id
      integer wmles_sec_id  
c     kappa in the log law
      integer wmles_logkappa_id
c     B in the log law
      integer wmles_logb_id
c     z0 in the rough log law and z1 for temperature
      integer wmles_z0_id, wmles_z1_id
c     inital guess for the wall-shear stress
      integer wmles_guess_id
c     the boundary id identifying walls on which modelling is applied 
      integer wmles_bid_id
c     wall-normal index of the sampling point
      integer wmles_samplingidx_id
c     wether to use wall viscosity or a traction boundary
      integer wmles_ifviscosity_id
c     number of iterations defining the time-scale for averaging
      integer wmles_navrg_id
c     constant surface temperature
      integer wmles_surface_temp_id
c     whether h is index or distance
      integer wmles_h_is_index_id
      
c     Timers
c     total
      integer wmles_tmr_tot_id
c     sampling
      integer wmles_tmr_sampling_id
      
c     The array holding the wall shear stress components.
c     The size is equal to the number of nodes in the domain x3.
c     This is a waste since we actually only need the boundary nodes
c     but it does make indexing much easier, so we keep it this way
c     for now.
      real tau(3, lx1, ly1, lz1, lelv)
c     Same for the wall heat flux
      real heat_flux(lx1, ly1, lz1, lelv)

c     sampled velocity
      real vh(3, lx1, ly1, lz1, lelv)
      real wmles_solh(NMAX_BOUNDARY_POINTS, 4)
c     sampled temperature
      real temph(lx1, ly1, lz1, lelv)
c     surface temperature
      real temps(lx1, ly1, lz1, lelv)
c     sampling height
      real sampling_h(NMAX_BOUNDARY_POINTS)
c     sampling points
      real sampling_points(NMAX_BOUNDARY_POINTS, 3)
c     normals
      real wmles_normals(NMAX_BOUNDARY_POINTS, 3)

c     number of iterations defining the time-scale for averaging
      real wmles_navrg
c     surface temperature
      real wmles_surface_temp

c     The off-wall index of the sampling point
      integer samplingidx
c     The boundary id for the walls
      integer wallbid
c     Whether to use viscosity at the wall to enforce tau
      logical ifviscosity
c     Whether h is an integer index or a distance
      logical ifhisindex
c     Actual number of gll nodes for boundary wallbid
      integer n_boundary_points
c     Handle for interpolation
      integer wmles_interpolation_handle
c     Flag for searching points for interpolation
      logical wmles_iffind

c     Common blocks split by variable type
      common /wmlesi/ wmles_sec_id, wmles_logkappa_id, wmles_logb_id,
     $                wmles_z0_id, wmles_z1_id, wmles_guess_id,
     $                wmles_samplingidx_id,
     $                wmles_bid_id, wmles_ifviscosity_id,
     $                wmles_navrg_id, wmles_surface_temp_id,
     $                wmles_tmr_tot_id, wmles_tmr_sampling_id,
     $                wmles_h_is_index_id,
     $                samplingidx, wallbid, n_boundary_points,
     $                wmles_interpolation_handle

      common /wmlesl/ wmles_ifinit, ifviscosity, ifhisindex,
     $                wmles_iffind

      common /wmlesr/ tau, wmles_navrg, vh, heat_flux, temph, temps,
     $ wmles_surface_temp, sampling_h, sampling_points, wmles_solh,
     $ wmles_normals
